#!/bin/bash

extra=$@

function sep() {
	if [ -n "$1" ]; then
		echo -e '\n###\n### '$1'\n###\n'
	else
		echo -e '\n###\n'
	fi
}

function check_inst() {
	if [ -z "$(which "$1")" ]; then
		if [ -z "$update" ]; then
			update=1
			sudo apt-get -y update
		fi
		sudo apt-get install -y "$1"
	fi
}
if [ ! -d ~/smallfile ]; then
	git clone --depth=1 https://github.com/bengland2/smallfile ~/smallfile
fi
for p in fio git datamash; do
	check_inst $p
done

out=${PWD}
put=

fiotrim='grep -Ev Laying\sout' ## layouts trim

function cherryp() {
	put+="\n## $1\n"
	put+=$(echo "$2" | grep -Po "bw=.*?/s|iops=[0-9]*|80\.00th=\[.*?\]")
}

sep "SEQUENTIAL"
# full write pass
sequential=$(sudo fio -name=writefile --size=512M --filesize=512M \
	--directory=$out --unlink=1 --bs=1M --nrfiles=1 \
	--direct=1 --sync=0 --randrepeat=0 --rw=write --refill_buffers --end_fsync=1 \
	--iodepth=128 --ioengine=libaio $extra | $fiotrim)
echo "$sequential"
cherryp "sequential" "$sequential"

sep "RANDOM READ"
# rand read
randread=$(sudo fio --time_based --name=benchmark --size=512M --runtime=30 \
	--directory=$out --ioengine=libaio --randrepeat=0 \
	--iodepth=32 --direct=1 --invalidate=1 --verify=0 --verify_fatal=0 \
	--numjobs=4 --loops=4 --rw=randread --blocksize=4k --group_reporting $extra | $fiotrim)
echo "$randread"
cherryp "randread" "$randread"

sep "RANDOM READWRITE"
# rand write
randrw=$(sudo fio --time_based --name=benchmark --size=512M --runtime=30 \
	--directory=$out --unlink=1 --ioengine=libaio --randrepeat=0 \
	--iodepth=32 --direct=1 --invalidate=1 --verify=0 --verify_fatal=0 \
	--numjobs=4 --loops=4 --rw=randwrite --blocksize=4k --group_reporting $extra | $fiotrim)
echo "$randrw"
cherryp "randrw" "$randrw"

sep "FILES"
# metadata
files=$(sudo fio --time_based --name=layfiles --size=4K --runtime=30 \
	--directory=$out --unlink=1 --ioengine=libaio --randrepeat=0 \
	--iodepth=2 --direct=1 --invalidate=1 --verify=0 --verify_fatal=0 \
	--numjobs=512 --loops=4 --rw=randwrite --blocksize=4k --group_reporting $extra | $fiotrim)
echo "$files"
cherryp "files" "$files"

servers="nomad nomad1 nomad2"
function dc() {
	## this requires pswless ssh
	BIFS=$IFS
	IFS=' '
	for s in $servers; do
		ssh $s 'sudo bash -c "echo 3 > /proc/sys/vm/drop_caches"'
	done
	IFS=$'\n'
	val=
	for w in $(find $out/network_shared/rsptimes_*); do
		val+=$(cat $w | datamash -W q3 3)"\n"
	done
	val=$(echo -e $val | head -n -1 | datamash mean 1)
	put+="\n## $1\n"
	put+="${val}s \n"
	put+=$(echo "$2" | grep -E "/sec|IOPS")
	IFS=$BIFS
}
smftrim='sed -e 1,/starting\sall\sthreads/d'
SMF="$HOME/smallfile/smallfile_cli.py --top $PWD --host-set localhost --threads 8 --file-size 4 --files 1024 --response-times Y "
sep "CREATE"
create=$($SMF --operation create | $smftrim)
echo "$create"
dc "create" "$create"
sep "READ"
read=$($SMF --operation read | $smftrim)
echo "$read"
dc "read" "$read"
sep "APPEND"
append=$($SMF --operation append | $smftrim)
echo "$append"
dc "append" "$append"
sep "RENAME"
rename=$($SMF --operation rename | $smftrim)
echo "$rename"
dc "rename" "$rename"
sep "DELETE"
delete=$($SMF --operation delete-renamed | $smftrim)
echo "$delete"
dc "delete" "$delete"
rm -rf $out/file_dstdir
rm -rf $out/file_srcdir
rm -rf $out/network_shared
echo -e "$put"
